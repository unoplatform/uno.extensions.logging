trigger:
  branches:
    include:
      - master
      - release/beta/*
      - release/stable/*

pr: 
  branches:
    include:
      - master
      - release/beta/*
      - release/stable/*

variables:
    DotNet.Cli.Telemetry.OptOut: true

jobs:
- job: Packages

  pool:
    vmImage: 'windows-2022'

  workspace:
    clean: all
      
  variables:
    NUGET_PACKAGES: $(build.sourcesdirectory)/.nuget

  strategy:
    matrix:
      OSLog:
        ProjectToBuild: '$(build.sourcesdirectory)/src/Uno.Extensions.Logging.OSLog/Uno.Extensions.Logging.OSLog.csproj'
        DotNetVersion: 6.0.300
        UnoCheck.Version: '1.3.1'
        UnoCheck.Manifest: https://raw.githubusercontent.com/unoplatform/uno.check/8c7f669060a6cca50f71bb0845281c424ad7eb0d/manifests/uno.ui-preview.manifest.json

      WebAssembly:
        ProjectToBuild: '$(build.sourcesdirectory)/src/Uno.Extensions.Logging.WebAssembly.Console/Uno.Extensions.Logging.WebAssembly.Console.csproj'
        DotNetVersion: 8.0.300
        UnoCheck.Version: '1.24.0'
        UnoCheck.Manifest: https://raw.githubusercontent.com/unoplatform/uno.check/089f7fd18603415d1293d46922d43811b27a9f17/manifests/uno.ui.manifest.json

  steps:
  - checkout: self
    clean: true

  - task: gitversion/setup@0
    inputs:
      versionSpec: '5.x'

  - task: gitversion/execute@0
    inputs:
      updateAssemblyInfo: 'False'
      useConfigFile: true
      configFilePath: GitVersion.yml
    displayName: Use GitVersion

    ## Required until .NET 6 installs properly on Windows using UseDotnet
  - powershell: |
      $ProgressPreference = 'SilentlyContinue'
      Invoke-WebRequest -Uri "https://dot.net/v1/dotnet-install.ps1" -OutFile dotnet-install.ps1
      & .\dotnet-install.ps1 -Version $(DotNetVersion) -InstallDir "$env:ProgramFiles\dotnet\" -Verbose
      & dotnet --list-sdks
    displayName: Install .NET $(DotNetVersion)
    errorActionPreference: stop

  - powershell: |
      & dotnet tool update --global uno.check --version $(UnoCheck.Version) --add-source https://api.nuget.org/v3/index.json
      & uno-check --ci --non-interactive --fix --skip androidsdk --skip androidemulator --skip xcode --skip vswin --skip vsmac --manifest $(UnoCheck.Manifest)
    displayName: Install .NET Workloads
    errorActionPreference: continue
    ignoreLASTEXITCODE: true

  - powershell: |
      rm src/global.json
      mv src/global.net6.json src/global.json
    displayName: Replace global.json
    condition: eq(variables['DotNetVersion'], '6.0.300')

  - task: MSBuild@1
    displayName: Build Package
    inputs:
      solution: $(ProjectToBuild)
      msbuildLocationMethod: version
      msbuildVersion: latest
      msbuildArchitecture: x86
      msbuildArguments: /r /p:Configuration=Release /bl:$(build.artifactstagingdirectory)\msbuild.binlog "/p:PackageOutputPath=$(build.artifactstagingdirectory)\nuget" "/p:PackageVersion=$(GITVERSION.FullSemVer)" "/p:InformationalVersion=$(GITVERSION.InformationalVersion)"  /detailedsummary
      clean: false
      maximumCpuCount: true
      restoreNugetPackages: false
      logProjectEvents: false
      createLogFile: false

  - task: PowerShell@2
    displayName: Authenticode Sign Packages
    inputs:
      filePath: build/Sign-Package.ps1
    env:
      SignClientUser: $(SignClientUser)
      SignClientSecret: $(SignClientSecret)
      SignPackageName: "Uno.Extensions.Logging"
      SignPackageDescription: "Uno.Extensions.Logging"
      ArtifactDirectory: $(build.artifactstagingdirectory)
    condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      ArtifactName: $(Build.DefinitionName)
