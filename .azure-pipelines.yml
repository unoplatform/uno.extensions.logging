pool:
  vmImage: 'windows-2019'

trigger:
  branches:
    include:
      - master
      - release/beta/*
      - release/stable/*

pr: 
  branches:
    include:
      - master
      - release/beta/*
      - release/stable/*

variables:
  # net6 preview install related
  DotNetVersion: 6.0.100-preview.6.21355.2
  MauiCheck.Version: '0.6.1'
  DotNet.Cli.Telemetry.OptOut: true
  MauiCheck.Manifest: https://raw.githubusercontent.com/Redth/dotnet-maui-check/556b43a8b9df5ea1e65eb6b9b3ea8854a91fceed/manifests/maui-preview.manifest.json

steps:
  - checkout: self
    clean: "true"

  - task: gitversion/setup@0
    inputs:
      versionSpec: '5.x'

  - task: gitversion/execute@0
    inputs:
      updateAssemblyInfo: 'False'
      useConfigFile: true
      configFilePath: GitVersion.yml
    displayName: Use GitVersion

    ## Required until .NET 6 installs properly on Windows using UseDotnet
  - powershell: |
      $ProgressPreference = 'SilentlyContinue'
      Invoke-WebRequest -Uri "https://dot.net/v1/dotnet-install.ps1" -OutFile dotnet-install.ps1
      & .\dotnet-install.ps1 -Version $(DotNetVersion) -InstallDir "$env:ProgramFiles\dotnet\" -Verbose
      & dotnet --list-sdks
    displayName: install .NET $(DotNetVersion)
    errorActionPreference: stop

  - powershell: |
      & dotnet tool update --global redth.net.maui.check --version $(MauiCheck.Version) --add-source https://api.nuget.org/v3/index.json
      & maui-check --ci --non-interactive --fix --skip androidsdk --skip xcode --skip vswin --skip vsmac --manifest $(MauiCheck.Manifest)
    displayName: Install .NET 6 Workloads
    errorActionPreference: continue

  - pwsh: |
      cd $(build.sourcesdirectory)/src
      dotnet msbuild Uno.Extensions.Logging.sln /r /p:Configuration=Release "/p:PackageOutputPath=$(build.artifactstagingdirectory)\nuget" "/p:PackageVersion=$(GITVERSION.FullSemVer)" "/p:InformationalVersion=$(GITVERSION.InformationalVersion)"  /detailedsummary
    displayName: Build NetCore-Wasm Sample

  - task: PowerShell@2
    displayName: Authenticode Sign Packages
    inputs:
      filePath: build/Sign-Package.ps1
    env:
      SignClientUser: $(SignClientUser)
      SignClientSecret: $(SignClientSecret)
      SignPackageName: "Uno.Extensions.Logging"
      SignPackageDescription: "Uno.Extensions.Logging"
      ArtifactDirectory: $(build.artifactstagingdirectory)
    condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: $(Build.DefinitionName)
